[project]
name = "ekko"
version = "0.2.0"
description = "AI-powered podcast discovery, transcription and summarization platform"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    {name = "Ekko Team", email = "team@ekko.ai"}
]
keywords = ["podcast", "ai", "transcription", "summarization", "llm", "rag"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Multimedia :: Sound/Audio :: Speech",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "streamlit>=1.31.0",
    "streamlit-authenticator>=0.3.1",
    "openai>=1.12.0",
    "crewai>=0.30.0",
    "crewai-tools>=0.2.0",
    "pydantic>=2.6.0",
    "python-dotenv>=1.0.0",
    "feedparser>=6.0.10",
    "requests>=2.31.0",
    "pandas>=2.2.0",
    "sqlalchemy>=2.0.25",
    "torch>=2.2.0",
    "transformers>=4.38.0",
    "langchain>=0.1.6",
    "langchain-community>=0.0.20",
    "langchain-openai>=0.0.5",
    "chromadb>=0.4.22",
    "tiktoken>=0.5.2",
    "readtime>=3.0.0",
    "youtube-transcript-api>=0.6.2",
    "yt-dlp>=2024.1.0",
    "fastapi>=0.109.0",
    "uvicorn>=0.27.0",
    "pyngrok>=7.0.5",
    "redis>=5.0.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "ipykernel>=6.29.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/ekko-ai/ekko"
Documentation = "https://docs.ekko.ai"
Repository = "https://github.com/ekko-ai/ekko"
Issues = "https://github.com/ekko-ai/ekko/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["ekko_prototype", "rss_parser", "audio_transcriber"]

[tool.ruff]
line-length = 88
target-version = "py313"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "S",      # flake8-bandit
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "T10",    # flake8-debugger
    "SIM",    # flake8-simplify
    "PD",     # pandas-vet
    "RUF",    # Ruff-specific rules
]
ignore = [
    "E501",   # Line too long (handled by formatter)
    "S101",   # Use of assert detected
    "S608",   # Possible SQL injection
    "E402",   # Module imports not at top
    "S105",   # Hardcoded password
    "S113",   # Request without timeout
    "E722",   # Bare except
    "E712",   # True/False comparison
    "S108",   # Temp file usage
    "PD901",  # df variable name
    "S104",   # Bind all interfaces
    "S324",   # Insecure hash
    "N805",   # First argument name
    "B008",   # Function call in default
    "F841",   # Unused variable
    "F403",   # Star imports
    "N999",   # Invalid module name
    "RUF013", # Implicit optional
    "SIM102", # Collapsible if
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests
"**/__init__.py" = ["F401", "F403"]  # Allow unused and star imports in __init__ files

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
warn_unused_ignores = true
show_error_codes = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "streamlit.*",
    "feedparser.*",
    "transformers.*",
    "torch.*",
    "pyngrok.*",
    "readtime.*",
    "youtube_transcript_api.*",
    "yt_dlp.*",
    "crewai.*",
    "crewai_tools.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--verbose",
    "--cov=ekko_prototype",
    "--cov=rss_parser",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=70",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["ekko_prototype", "rss_parser", "audio_transcriber"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/experiments/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]