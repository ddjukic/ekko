name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ekko
  REGION: us-central1
  IMAGE: gcr.io/${{ secrets.GCP_PROJECT_ID }}/ekko

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          uv pip install ruff mypy

      - name: Run Ruff linter
        run: |
          source .venv/bin/activate
          ruff check . --config pyproject.toml

      - name: Run Ruff formatter check
        run: |
          source .venv/bin/activate
          ruff format --check . --config pyproject.toml

      - name: Run mypy type checker
        run: |
          source .venv/bin/activate
          mypy ekko_prototype --config-file pyproject.toml || true
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -r requirements.txt
          uv pip install pytest pytest-cov pytest-xdist

      - name: Run unit tests
        run: |
          source .venv/bin/activate
          pytest tests/ -v --cov=ekko_prototype --cov-report=xml --cov-report=term
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PODCASTINDEX_API_KEY: ${{ secrets.PODCASTINDEX_API_KEY }}
          PODCASTINDEX_API_SECRET: ${{ secrets.PODCASTINDEX_API_SECRET }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r ekko_prototype -f json -o bandit-report.json || true

      - name: Check for known vulnerabilities
        run: |
          safety check --json || true
        continue-on-error: true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ekko:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm ekko:latest /app/.venv/bin/streamlit --version

  deploy:
    name: Deploy to Google Cloud Run
    runs-on: ubuntu-latest
    needs: [build]
    # Only deploy on push to main, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE }}:${{ github.sha }} .
          docker tag ${{ env.IMAGE }}:${{ github.sha }} ${{ env.IMAGE }}:latest

      - name: Push to Google Container Registry
        run: |
          docker push ${{ env.IMAGE }}:${{ github.sha }}
          docker push ${{ env.IMAGE }}:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --memory 2Gi \
            --cpu 2 \
            --timeout 300 \
            --max-instances 10 \
            --min-instances 0 \
            --port 8080 \
            --set-env-vars="LOG_LEVEL=INFO" \
            --set-secrets="OPENAI_API_KEY=openai-api-key:latest" \  # pragma: allowlist secret
            --set-secrets="PODCASTINDEX_API_KEY=podcastindex-api-key:latest" \  # pragma: allowlist secret
            --set-secrets="PODCASTINDEX_API_SECRET=podcastindex-api-secret:latest" \  # pragma: allowlist secret
            --set-secrets="YOUTUBE_API_KEY=youtube-api-key:latest"  # pragma: allowlist secret

      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          echo "Service deployed to: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Smoke test
        run: |
          sleep 10
          curl -f ${{ env.SERVICE_URL }}/_stcore/health || exit 1

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ env.SERVICE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
