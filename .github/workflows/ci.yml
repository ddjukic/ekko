name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.13'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          uv venv
          uv pip install ruff mypy
      
      - name: Run Ruff linter
        run: |
          source .venv/bin/activate
          ruff check . --config pyproject.toml
      
      - name: Run Ruff formatter check
        run: |
          source .venv/bin/activate
          ruff format --check . --config pyproject.toml
      
      - name: Run mypy type checker
        run: |
          source .venv/bin/activate
          mypy ekko_prototype --config-file pyproject.toml || true
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          uv venv
          uv pip install -r requirements.txt
          uv pip install pytest pytest-cov pytest-xdist
      
      - name: Run unit tests
        run: |
          source .venv/bin/activate
          pytest tests/ -v --cov=ekko_prototype --cov-report=xml --cov-report=term --ignore=tests/test_ekko_playwright.py
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PODCASTINDEX_API_KEY: ${{ secrets.PODCASTINDEX_API_KEY }}
          PODCASTINDEX_API_SECRET: ${{ secrets.PODCASTINDEX_API_SECRET }}
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          pip install bandit safety
      
      - name: Run Bandit security scan
        run: |
          bandit -r ekko_prototype -f json -o bandit-report.json || true
      
      - name: Check for known vulnerabilities
        run: |
          safety check --json || true
        continue-on-error: true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ekko:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          docker run --rm ekko:latest streamlit --version